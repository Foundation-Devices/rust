name: Rust for Xous

on: [push]

jobs:
  build-libstd:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [riscv32imac-unknown-xous-elf, armv7a-unknown-xous-eabihf]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup RISC-V GCC Toolchain
        uses: gregdavill/setup-riscv-gnu-toolchain@v1.0
        if: matrix.target == 'riscv32imac-unknown-xous-elf'

      - name: Setup ARM Profile-A GCC toolchain
        run: sudo apt install gcc-arm-linux-gnueabihf
        if: matrix.target == 'armv7a-unknown-xous-eabihf'

      - name: Determine Rust version
        shell: bash
        run: echo "##[set-output name=version;]$(echo ${GITHUB_REF} | cut -d/ -f3 | cut -d- -f1 | cut -d. -f1,2,3)"
        id: extract_rust_version

      - name: Install Rust toolchain v${{ steps.extract_rust_version.outputs.version }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.extract_rust_version.outputs.version }}
          default: true
          override: true
          target: ${{ matrix.target }}

      - name: Install toolchain file
        run: |
          rm -rf $(rustc --print sysroot)/lib/rustlib/${{ matrix.target }} \
          && mkdir -p $(rustc --print sysroot)/lib/rustlib/${{ matrix.target }}/lib \
          && cp ${{ matrix.target }}.json $(rustc --print sysroot)/lib/rustlib/${{ matrix.target }}/target.json \
          && rustc --version | awk '{print $2}' > $(rustc --print sysroot)/lib/rustlib/${{ matrix.target }}/RUST_VERSION

      - name: Patch LLVM for 128-bit support
        run: sed -i '/^#define CRT_HAS_128BIT/d' src/llvm-project/compiler-rt/lib/builtins/int_types.h

      - name: Build Rust libstd
        run: |
          export RUST_COMPILER_RT_ROOT=$(pwd)/src/llvm-project/compiler-rt \
          && rm -rf target \
          && cargo build \
            --target ${{ matrix.target }} \
            -Zbinary-dep-depinfo \
            --release \
            --features "panic-unwind compiler-builtins-c compiler-builtins-mem" \
            --manifest-path "library/test/Cargo.toml" \
          && cp target/${{ matrix.target }}/release/deps/*.rlib $(rustc --print sysroot)/lib/rustlib/${{ matrix.target }}/lib \
          && (dest=$(pwd) && cd $(rustc --print sysroot) && zip -r ${dest}/${{ matrix.target }}_${{ steps.extract_rust_version.outputs.version }}.zip lib/rustlib/${{ matrix.target }}/)
        env:
          CARGO_PROFILE_RELEASE_DEBUG: 0
          CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS: true
          RUSTC_BOOTSTRAP: 1
          RUSTFLAGS: -Cforce-unwind-tables=yes -Cembed-bitcode=yes
          __CARGO_DEFAULT_LIB_METADATA: stablestd
          CC: riscv-none-embed-gcc
          AR: riscv-none-embed-ar

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ matrix.target }}_${{ steps.extract_rust_version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
